pro hale_final

  common widget_environment, img, didx, tidx, mouseread
  common eemouse_environment, rasterfile, rasterdir, sjifile, SiIV_EE_map, goodmap
  common data, rasterindex,rasterdata,sjiindex,sjidata,si_1403_index, si_1403_data,fe_index,fe_data


  iris_orbitvar_corr_l2_old,rasterfile,lambda_shift,nuv_shift,date_obs
  raster_size= size(si_1403_data)
  wavemin = si_1403_index[0].wavemin
  wavemax = si_1403_index[0].wavemax
  wavesz = raster_size[1]
  lambda = wavemin + si_1403_index[0].cdelt1*findgen(si_1403_index[0].naxis1) ;wavelength axis, Angstroms
  lambda0 = si_1403_index.wavelnth ;central wavelength for Si IV.
  lambda0 = reform(lambda0,1,1,raster_size[3])
  lambda0 = rebin(lambda0,raster_size[1],1,raster_size[3])
  lambda = rebin(lambda,raster_size[1],1,raster_size[3])
  lambda_shift = reform(lambda_shift,1,1,raster_size[3])
  lambda_shift = rebin(lambda_shift,raster_size[1],1,raster_size[3])
  lambda -= lambda_shift
  c = 3e5                                     ;speed of light, km/s
  velocity = c * (lambda - lambda0)/lambda0   ;velocity axis, km/s

  
;Start with event 16
  ee_event = 16
  x0 = mouseread.x0[ee_event]
  x1 = mouseread.x1[ee_event]
  y0 = mouseread.y0[ee_event]
  y1 = mouseread.y1[ee_event]
  

;Determine the extent of the spectral domain
  vel_plus = min(where(velocity[*,0,0] ge 300))
  vel_minus = max(where(velocity[*,0,0] le -300))

;Carve out event
  ee16 = si_1403_data[vel_minus:vel_plus,y0:y1,x0:x1]
  ee16sz = size(ee16,/structure)
  ee16_vel = velocity[vel_minus:vel_plus,0,x0:x1]

;Do some gaussian fitting for every spectral line of 1403
  g = ee16*0
  fit = fltarr(9,ee16sz.dimensions[1],ee16sz.dimensions[2])
  fit_chi2 = fltarr(ee16sz.dimensions[1],ee16sz.dimensions[2])

  for i = 0,y1-y0-1 do begin
     for j = 0,x1-x0-1 do begin
        ;; print,'[i,j]',i,',',j
        if total(ee16[*,i,j]) eq 0 then begin
           g[0,i,j] = fltarr(ee16sz.dimensions[0])
           fit[0,i,j] = fltarr(9)
        endif else begin
           if max(ee16[*,i,j]) lt 20 then begin
              g[0,i,j] = fltarr(ee16sz.dimensions[0])
              fit[0,i,j] = fltarr(9)
           endif else begin
              g[0,i,j] = gauss_fit(ee16_vel[*,0,j],ee16[*,i,j],a,/no_back,chi2 = chi2)
              fit[0,i,j] = a
              fit_chi2[i,j] = chi2
              if abs(a[4]) ge 200 then begin
                 g[0,i,j] = fltarr(ee16sz.dimensions[0])
                 fit[0,i,j] = fltarr(9)
              endif
              if abs(a[4]) lt 200 gt 100 then begin
       
                 plot,ee16_vel[*,*,j],ee16[*,i,j],psym=2
                 oplot,ee16_vel[*,*,j],g[*,i,j]
                 STOP
              endif
           endelse
        endelse
     end
  end

;Velocity Map Plot



doppler_shifts = reform(fit[4,*,*],ee16sz.dimensions[1],ee16sz.dimensions[2])
doppler_shifts = transpose(doppler_shifts)
velo_map = image(doppler_shifts[135:-1,*],/current,margin=0)
velo_map.rgb_table = colortable(70,/reverse)
velo_map.max_value = 100
velo_map.min_value = -100

chi2_trans = transpose(fit_chi2)
fit_quality = contour(chi2_trans[135:-1,*],/current,/overplot,color='black',c_label_show=0)
STOP

end
