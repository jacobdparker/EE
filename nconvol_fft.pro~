; Name:
;   NCONVOL_FFT
;
; Purpose:
;   Convolution of an image using Fourier transforms for speed
;       
; Parameters:
;   IMAGE: ND array to be convolved with the kernel
;       
;   KERNEL: ND array (size < or = to size of image)
;

;-
function nconvol_fft, image, kernel, $
                     AUTO_CORRELATION=auto, CORRELATE=corr, NO_PADDING=noPad, $
                     IMAGE_FFT=imageFFT, KERNEL_FFT=kernelFFT
  


;  Begin attempted modifications for N-dimensions, for now limited to
;  convolution, maybe later I will include correlation
  imagesz = size(image,/structure)
  imageDims2 = FLOOR((imagesz.dimensions-1)/2)
 
   
; Pad image with zeros in a way that each dimension is a multiple of 2

  
  imageDims=imagesz.dimensions
  multoftwo = 2^(indgen(10)+5)
  padsize = intarr(imagesz.n_dimensions)
  corner = padsize*0
  for i = 0,imagesz.n_dimensions-1 do begin
     padsize[i] = multoftwo[min(where(multoftwo-imagedims[i]*2 gt 0))]
  end
 
        bigImage = dblarr(padsize)
        bigImage[corner] = image
    STOP
TIC
  imageFFT = FFT(bigImage,-1)
  imageNElts = N_ELEMENTS(bigImage)
TOC

    
  kernelSz = size(kernel, /STRUCTURE)
    
  loc = (imageDims2 - floor((kernelDims-1)/2)) > 0
  STOP
  kernelTemp = dblarr(imageDims[0]*2,imageDims[1]*2)
  kernelTemp[loc[0]:loc[0]+kernelDims[0]-1, $
                 loc[1]:loc[1]+kernelDims[1]-1] = kernel
  kernelFFT = FFT(kernelTemp, -1)

    
    
      conv = imageNElts*REAL_PART(FFT(imageFFT*kernelFFT, 1))
      conv = SHIFT(conv, -imageDims2[0], -imageDims2[1])
    
    
    return, conv[0:imageDims[0]-1,0:imageDims[1]-1]
  
  
end
